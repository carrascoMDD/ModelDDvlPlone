<tal:block replace="nothing">
# -*- coding: utf-8 -*-
#
# File: Tabular.pt
#
# Copyright (c) 2008, 2009, 2010, 2011  by Model Driven Development sl and Antonio Carrasco Valero
#
# GNU General Public License (GPL)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
#
# Authors: 
# Model Driven Development sl  Valencia (Spain) www.ModelDD.org 
# Antonio Carrasco Valero                       carrasco@ModelDD.org
#
</tal:block>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      lang="en"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="plone">
<body>

    <metal:main fill-slot="main">
        <tal:main-macro metal:define-macro="main"
            tal:define="text string:Copyright 2008, 2009, 2010 Model Driven Development sociedad limitada y Antonio Carrasco Valero;
            global pStartTime       pStartTime | python: here.MDDModelDDvlPlone_tool.fMillisecondsNow()" >
            
            <div metal:use-macro="here/document_actions/macros/document_actions">
                Document actions (print, sendto etc)
            </div>
    
            <h1 tal:content="object_title" class="documentFirstHeading">
              Title or id
            </h1>
    
            <div metal:use-macro="here/document_byline/macros/byline">
              Get the byline - contains details about author and modification date.
            </div>
    
            <tal:block tal:define="dummy python: here.MDDModelDDvlPlone_tool.pSetDefaultDisplayView( here)" />
            
            <tal:block tal:define="
                global pPerformanceAnalysis         pPerformanceAnalysis | python: {};
                pPasteRequested                     pPasteRequested      | nothing; 

                pInteractionParms python: {
                    'theModelDDvlPloneTool': here.MDDModelDDvlPlone_tool,
                    'thePerformanceAnalysis':pPerformanceAnalysis,
                    'theBrowsedElement':     here, 
                    'theRequest':            here.REQUEST, 
                    'thePasteRequested':     pPasteRequested,
                    'theAdditionalParms':    { },
                };
                pViewParms python: {
                    'theModelDDvlPloneTool': here.MDDModelDDvlPlone_tool,
                    'thePerformanceAnalysis':pPerformanceAnalysis,
                    'theBrowsedElement':     here, 
                    'theTraversalName':      here.REQUEST.get('theTraversalName',      None,),
                    'theReferenceFieldName': here.REQUEST.get('theReferenceFieldName', None,),
                    'theRelationCursorName': here.REQUEST.get('theRelationCursorName', None,),
                    'theCurrentElementUID':  here.REQUEST.get('theCurrentElementUID',  None,),
                    'theRequest':            here.REQUEST, 
                    'thePasteRequested':     here.REQUEST.get('', False,),
                    'theGroupAction':        here.REQUEST.get('', False,),
                    'theUIDs':               here.REQUEST.get('', False,),
                    'theMovedElementID':     here.REQUEST.get('theMovedElementID',    None,),
                    'theMovedObjectUID':     here.REQUEST.get('theMovedObjectUID',    None,),
                    'theMovedReferenceUID':  here.REQUEST.get('theMovedReferenceUID', None,),
                    'theMoveDirection':      here.REQUEST.get('theMoveDirection',     None,),
                    'theTranslationsCache':  None,
                    'thePermissionsCache':   None, 
                    'theRolesCache':         None,
                    'theParentExecutionRecord':None,
                    'thePasteRequested':     pPasteRequested,
                    'theClearClipboard':     here.REQUEST.get('theClearClipboard',     None,),
                    'theGroupAction':        here.REQUEST.get('theGroupAction',        None,),
                    'theGroupUIDs':          here.REQUEST.get('theUIDs',        None,),
                    'theAdditionalParms':    { },
                    'xxxtheCustomMethodBindings': { 
                        'xxxMDDRender_Clipboard':                'gvSIGbpd_creditos_i18n_view',
                        'xxxMDDRender_Tabular_Cabecera_Cursor':  'eval 123456789',
                        'xxxMDDExtension_Before':                'MDDTryExtension',         
                        'xxxMDDExtension_Render_Tabular_After':     'eval theModelDDvlPloneTool.fTestAddedMethod2()',
                        'MDDExtension_After': [       
                            'exec theRdCtxt.pOS( str( 9999999999999))',
                            'MDDTryExtension', 
                            'eval 1 + 2 +3 + 5 + 7+ 11', 
                            'gvSIGbpd_creditos_i18n_view',
                            'eval theModelDDvlPloneTool.fTestAddedMethod()',
                            'MDDTryExternalMethodExtension',
                        ],
                    },                                               
                };                
                " 
            tal:replace="structure python: here.MDDInteractionTabular( theInteractionParms=pInteractionParms, theViewParms=pViewParms)" />    
            
            
            <tal:block tal:replace="nothing" >
                Example of additional parms
                <tal:block tal:define="
                    pPasteRequested             pPasteRequested | python: False;
                    global pPerformanceAnalysis         pPerformanceAnalysis | python: {};
                    pViewParms python: {
                        'theModelDDvlPloneTool': here.MDDModelDDvlPlone_tool,
                        'thePerformanceAnalysis':pPerformanceAnalysis,
                        'theBrowsedElement':     here, 
                        'theTraversalName':      here.REQUEST.get('theTraversalName',      None,),
                        'theReferenceFieldName': here.REQUEST.get('theReferenceFieldName', None,),
                        'theRelationCursorName': here.REQUEST.get('theRelationCursorName', None,),
                        'theCurrentElementUID':  here.REQUEST.get('theCurrentElementUID',  None,),
                        'theRequest':            here.REQUEST, 
                        'thePasteRequested':     here.REQUEST.get('', False,),
                        'theGroupAction':        here.REQUEST.get('', False,),
                        'theUIDs':               here.REQUEST.get('', False,),
                        'theMovedElementID':     here.REQUEST.get('theMovedElementID',    None,),
                        'theMovedObjectUID':     here.REQUEST.get('theMovedObjectUID',    None,),
                        'theMovedReferenceUID':  here.REQUEST.get('theMovedReferenceUID', None,),
                        'theMoveDirection':      here.REQUEST.get('theMoveDirection',     None,),
                        'theTranslationsCache':  None,
                        'thePermissionsCache':   None, 
                        'theRolesCache':         None,
                        'theParentExecutionRecord':None,
                        'thePasteRequested':     pPasteRequested,
                        'theClearClipboard':     here.REQUEST.get('theClearClipboard',     None,),
                        'theGroupAction':        here.REQUEST.get('theGroupAction',        None,),
                        'theGroupUIDs':          here.REQUEST.get('theUIDs',        None,),
                        'theAdditionalParms':    { },
                        'xxxtheCustomMethodBindings': { 
                            'xxxMDDRender_Clipboard':                'gvSIGbpd_creditos_i18n_view',
                            'xxxMDDRender_Tabular_Cabecera_Cursor':  'eval 123456789',
                            'xxxMDDExtension_Before':                'MDDTryExtension',         
                            'xxxMDDExtension_Render_Tabular_After':     'eval theModelDDvlPloneTool.fTestAddedMethod2()',
                            'MDDExtension_After': [       
                                'exec theRdCtxt.pOS( str( 9999999999999))',
                                'MDDTryExtension', 
                                'eval 1 + 2 +3 + 5 + 7+ 11', 
                                'gvSIGbpd_creditos_i18n_view',
                                'eval theModelDDvlPloneTool.fTestAddedMethod()',
                                'MDDTryExternalMethodExtension',
                            ],
                        },                                               
                    };" 
                tal:replace="structure python: here.MDDInteractionTabular( theViewParms=pViewParms)" />    
            </tal:block>

            
            
            
        </tal:main-macro>
    </metal:main>

</body>
</html>

