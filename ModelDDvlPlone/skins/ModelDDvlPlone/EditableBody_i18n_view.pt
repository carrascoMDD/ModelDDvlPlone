<tal:block replace="nothing">
# -*- coding: utf-8 -*-
#
# File: EditableBody_i18n_view.pt
#
# Copyright (c) 2008, 2009, 2010, 2011  by Model Driven Development sl and Antonio Carrasco Valero
#
# GNU General Public License (GPL)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
#
# Authors: 
# Model Driven Development sl  Valencia (Spain) www.ModelDD.org 
# Antonio Carrasco Valero                       carrasco@ModelDD.org
#
</tal:block>

<metal:block metal:use-macro="here/PerformanceAnalysis/macros/tSetupPerformanceAnalysis" />   
<tal:block tal:define="
    pMsgGoToToc python: here.MDDModelDDvlPlone_tool.fTranslateI18N( here, 'ModelDDvlPlone', 'ModelDDvlPlone_GoToTOC', 'toc-');

    global pMDDTopTgDefined python: False;
    global pMDDTraversalTargetCounter              pMDDTraversalTargetCounter | python: 0;
    global pMDDElementTargetCounter                pMDDElementTargetCounter | python: 0;
    global pMDDTitleCounter                        pMDDTitleCounter | python: 0;
           pTraversalTargetsByTraversalName        python: { 'algo_ogla_124441123': 'nada',};
           pAlreadyDeclaredTargets                 python: [ 'algo_ogla_xx'];
           pElementTargetsByUID                    python: { 'algo_ogla_124441123':'nada',};
           pElementTitlesByUID                     python: { 'algo_ogla_124441123':'nada',};
    global pTrue            python: True;
    global pFalse           python: False;
    global pPagina          string:Textual;
    global pPaginaAnteriorPosterior pPagina;
    global pRelationCursorName      request/theRelationCursorName  | python: None;                          
    global pCurrentElementUID       request/theCurrentElementUID   | string:;
    global pShowTrees       pFalse;
    global pStartTime       pStartTime | python: here.MDDModelDDvlPlone_tool.fMillisecondsNow()" ><tal:block 
    tal:define="pProfilingResults python: (pPerformanceAnalysis or {}).get( 'profiling_results', None);
        unosArgs python: {
            'theTimeProfilingResults'     :pProfilingResults,
            'theElement'                  :here, 
            'theAdditionalParams'         :None};"
    tal:content="python: here.MDDModelDDvlPlone_tool.fEditableBodyBlock_MetaTypeIcons( **unosArgs)" /><tal:block 
tal:condition="python: pRelationCursorName" ><metal:block 
    metal:use-macro="here/RelationCursor_EditableBody_i18n_view/macros/tRelationCursor_EditableBody_i18n" /></tal:block><tal:block 
tal:condition="not: pRelationCursorName" ><tal:block 
    tal:condition="python: request.cookies.has_key('ShowTrees')" ><tal:block    
        tal:condition="python: request.cookies[ 'ShowTrees'].lower() == 'yes'"><tal:block 
            tal:define="global pShowTrees python: True" /></tal:block><tal:block 
        tal:condition="python: not( request.cookies[ 'ShowTrees'].lower() == 'yes')"><tal:block 
            tal:define="global pShowTrees python: False" /></tal:block></tal:block><tal:block 
        tal:condition="python: request.form.has_key('ShowTrees')"><tal:block 
            tal:define="dummy python: request.RESPONSE.setCookie('ShowTrees', 'yes');
                               global pShowTrees python: True" /></tal:block><tal:block 
            tal:condition="python: request.form.has_key('HideTrees')"><tal:block 
                tal:define="dummy python: request.RESPONSE.setCookie('ShowTrees', 'no');
                               global pShowTrees python: False" /></tal:block><tal:block 
        tal:condition="python: not( request.cookies.has_key('ShowTrees') and  (request.cookies[ 'ShowTrees'].lower() == 'yes') == pShowTrees)" ><tal:block 
            tal:condition="python: pShowTrees" ><tal:block  
                tal:define="dummy python: request.RESPONSE.setCookie('ShowTrees', 'yes', path='/')" /></tal:block><tal:block 
                tal:condition="python: not pShowTrees" ><tal:block 
                    tal:define="dummy python: request.RESPONSE.setCookie('ShowTrees', 'no', path='/')" /></tal:block></tal:block><tal:block 
    tal:condition="pShowTrees" ><tal:block 
        tal:define="global pTreesFeatureFilter python: [ 'trees']" /></tal:block><tal:block 
    tal:condition="not: pShowTrees" ><tal:block 
    tal:define="global pTreesFeatureFilter python: [ ]" /></tal:block>     

<tal:block 
tal:define="
    pRetrievalStartTime  python: here.MDDModelDDvlPlone_tool.fMillisecondsNow();
    pProfilingResults python: (pPerformanceAnalysis or {}).get( 'profiling_results', None);
    unosArgs python: {
        'theTimeProfilingResults'     :pProfilingResults,
        'theElement'                  :here, 
        'theParent'                   :None,
        'theParentTraversalName'      :'',
        'theTypeConfig'               :None, 
        'theAllTypeConfigs'           :None, 
        'theViewName'                 :'Textual', 
        'theRetrievalExtents'         :[ 'traversals',] + pTreesFeatureFilter, 
        'theWritePermissions'         :[ 'object', 'delete',],
        'theFeatureFilters'           :None, 
        'theInstanceFilters'          :None,
        'theTranslationsCaches'       :None,
        'theCheckedPermissionsCache'  :None,
        'theAdditionalParams'         :None};
    SRES  python: here.MDDModelDDvlPlone_tool.fRetrieveTypeConfig( **unosArgs); 
    pRetrievalEndTime  python: here.MDDModelDDvlPlone_tool.fMillisecondsNow();
    pPermiteEditar  python: SRES[ 'read_permission'] and SRES[ 'write_permission']; 
    pShowOrHideTrees pTrue; 
    pMostrarAnteriorPosterior pTrue;
    
    
    pPloneElementsContainer  nocall: pPloneElementsContainer | nothing;                   
    pRetrievalStartTimePloneRetrieval  python: here.MDDModelDDvlPlone_tool.fMillisecondsNow();
    pProfilingResultsPloneRetrieval python: (pPerformanceAnalysis or {}).get( 'profiling_results', None);
    unosArgsPloneRetrieval python: { 
        'theTimeProfilingResults'     :pProfilingResultsPloneRetrieval,
        'theContainerElement'         :SRES[ 'object'], 
        'thePloneSubItemsParameters'  :None, 
        'theRetrievalExtents'         :[ 'traversals', ],
        'theWritePermissions'         :None,
        'theFeatureFilters'           :None, 
        'theInstanceFilters'          :None,
        'theTranslationsCaches'       :None,
        'theCheckedPermissionsCache'  :None,
        'theAdditionalParams'         :None};                                            
    PLONERES  python: here.MDDModelDDvlPlone_tool.fRetrievePloneContent( **unosArgsPloneRetrieval); 
    pRetrievalEndTimePloneRetrieval  python: here.MDDModelDDvlPlone_tool.fMillisecondsNow();
    aTotalPloneElements python:  reduce ( lambda a, b: a+ b, [ len( aTraversal[ 'elements']) for aTraversal in PLONERES[ 'traversals']])
    " >
    
<metal:block metal:use-macro="here/PerformanceAnalysis/macros/tRenderRetrievalTime_REST" />   
<tal:block 
    tal:define="pRetrievalStartTime pRetrievalStartTimePloneRetrieval; 
        pRetrievalEndTime pRetrievalEndTimePloneRetrieval"><metal:block 
        metal:use-macro="here/PerformanceAnalysis/macros/tRenderRetrievalTime_REST" /></tal:block>   
    
<metal:block metal:use-macro="here/Valores_EditableBody_i18n_view/macros/tValores_EditableBody_i18n" />




<tal:block
    tal:define="
        pNonEmptyTraversals      python: [ aTravResult for aTravResult in SRES[ 'traversals'] if ( ( aTravResult[ 'traversal_kind'] == 'aggregation') and aTravResult[ 'contains_collections'] and ( aTravResult[ 'num_elements'] > 0) and aTravResult[ 'has_grandchildren']) or ( ( aTravResult[ 'traversal_kind'] == 'aggregation') and ( not aTravResult[ 'contains_collections']) and ( aTravResult[ 'num_elements'] > 0) ) or ( ( aTravResult[ 'traversal_kind'] == 'relation') and ( aTravResult[ 'num_elements'] > 0))];
        pNonEmptyPloneTraversals python: [ aTravResult for aTravResult in PLONERES[ 'traversals'] if aTravResult[ 'num_elements'] ];
        " 
    tal:condition="python: ( len( pNonEmptyTraversals) + len( pNonEmptyPloneTraversals)) > 1" >
    
<tal:block tal:condition="python: ( not SRES[ 'is_collection']) and len( pNonEmptyTraversals) > 0" >
        <tal:block tal:repeat="TRAVRES python: pNonEmptyTraversals" >
            <tal:block tal:define="global pMDDTraversalTargetCounter python:pMDDTraversalTargetCounter + 1; 
                    pMDDTraversalTarget python: 'MDDTrTg%d' % pMDDTraversalTargetCounter;
                    dummy python: pTraversalTargetsByTraversalName.update( { TRAVRES[ 'traversal_name']: pMDDTraversalTarget, })">
                <tal:block tal:condition="python: ( TRAVRES[ 'traversal_kind'] == 'aggregation')">
                    <tal:block tal:condition="python: TRAVRES[ 'num_elements'] > 1">
                        <tal:block tal:condition="python: TRAVRES[ 'contains_collections']">
        
<tal:block tal:content="python:'\n\n.. |%s| replace:: %s\n\n' % ( pMDDTraversalTarget, TRAVRES[ 'traversal_translations'][ 'translated_label'])"/>
        
                            <tal:block tal:repeat="ERES TRAVRES/elements">
<tal:block tal:define="pElementIndex repeat/ERES/index;
                                    pMDDSubTraversalTarget python: '%sIdx%d' % ( pMDDTraversalTarget, pElementIndex,);
                                    dummy python: pTraversalTargetsByTraversalName.update( { '%sIdx%d' % ( TRAVRES[ 'traversal_name'], pElementIndex): pMDDSubTraversalTarget, })"
                                tal:content="python: '\n\n.. |%s| replace:: %s\n\n' % ( pMDDSubTraversalTarget, ERES[ 'values_by_name'][ 'title'][ 'uvalue'].strip(), )" />
                            </tal:block>
                        </tal:block>
                        <tal:block tal:condition="python: not  TRAVRES[ 'contains_collections']">
        
<tal:block tal:define="global pMDDTraversalTargetCounter python:pMDDTraversalTargetCounter + 1; 
                            pMDDTraversalTarget python: 'MDDTrTg%d' % pMDDTraversalTargetCounter;
                            dummy python: pTraversalTargetsByTraversalName.update( { TRAVRES[ 'traversal_name']: pMDDTraversalTarget, })"
                            tal:content="python: '\n\n.. |%s| replace:: %s\n\n' % (  pMDDTraversalTarget, TRAVRES[ 'traversal_translations'][ 'translated_label'], )"/>
                        </tal:block>
                    </tal:block>
                    
                    <tal:block tal:condition="python: TRAVRES[ 'num_elements'] == 1">
                        <tal:block tal:condition="python: TRAVRES[ 'contains_collections']">
                            <tal:block tal:condition="python: TRAVRES['elements'][ 0][ 'values_by_name'][ 'title'][ 'uvalue'].strip() == TRAVRES['elements'][ 0][ 'archetype_name']">
                                <tal:block tal:define="global pCollectionTitle python: TRAVRES['elements'][ 0][ 'type_translations'][ 'translated_archetype_name']" />
                            </tal:block>
                            <tal:block tal:condition="python: not ( TRAVRES['elements'][ 0][ 'values_by_name'][ 'title'][ 'uvalue'].strip() == TRAVRES['elements'][ 0][ 'archetype_name'])">
                                <tal:block tal:define="global pCollectionTitle python: TRAVRES[ 'elements'][ 0][ 'values_by_name'][ 'title'][ 'uvalue'].strip()" />
                            </tal:block>
                            <tal:block tal:define="global pMDDTraversalTargetCounter python:pMDDTraversalTargetCounter + 1; 
                                pMDDTraversalTarget python: 'MDDTrTg%d' % pMDDTraversalTargetCounter;
                             dummy python: pTraversalTargetsByTraversalName.update( { ( '%sIdx0' % TRAVRES[ 'traversal_name']): pMDDTraversalTarget, })">                
<tal:block tal:content="python: '\n\n.. |%s| replace:: %s\n\n' % ( pMDDTraversalTarget, pCollectionTitle,)" />
                            </tal:block>
                        </tal:block>
                        <tal:block tal:condition="python: not TRAVRES[ 'contains_collections']">
                            <tal:block tal:define="global pMDDTraversalTargetCounter python:pMDDTraversalTargetCounter + 1; 
                                pMDDTraversalTarget python: 'MDDTrTg%d' % pMDDTraversalTargetCounter;
                                dummy python: pTraversalTargetsByTraversalName.update( { TRAVRES[ 'traversal_name']: pMDDTraversalTarget, })">                
<tal:block tal:content="python: '\n\n.. |%s| replace:: %s\n\n' % ( pMDDTraversalTarget, TRAVRES[ 'traversal_translations'][ 'translated_label'],)" />
                            </tal:block>
                        </tal:block>
                    </tal:block>
                </tal:block>
    
                <tal:block tal:condition="python: ( TRAVRES[ 'traversal_kind'] == 'relation')">
    
<tal:block tal:define="global pMDDTraversalTargetCounter python:pMDDTraversalTargetCounter + 1; 
                            pMDDTraversalTarget python: 'MDDTrTg%d' % pMDDTraversalTargetCounter;
                            dummy python: pTraversalTargetsByTraversalName.update( { TRAVRES[ 'traversal_name']: pMDDTraversalTarget, })"
                            tal:content="python: '\n\n.. |%s| replace:: %s\n\n' % (  pMDDTraversalTarget, TRAVRES[ 'traversal_translations'][ 'translated_label'], )"/>
                </tal:block>
             </tal:block>
        </tal:block>
    
        
        

    
        <tal:block tal:repeat="TRAVRES python: pNonEmptyPloneTraversals" >
<tal:block tal:define="global pMDDTraversalTargetCounter python:pMDDTraversalTargetCounter + 1; 
                pMDDTraversalTarget python: 'MDDTrTg%d' % pMDDTraversalTargetCounter;
                dummy python: pTraversalTargetsByTraversalName.update( { TRAVRES[ 'traversal_name']: pMDDTraversalTarget, })"
                tal:content="python: '\n\n.. |%s| replace:: %s\n\n' % (  pMDDTraversalTarget, TRAVRES[ 'traversal_translations'][ 'translated_label'], )"/>
        </tal:block>
        
        
        <tal:block  tal:condition="not: pMDDTopTgDefined">
<tal:block
            tal:define="global pMDDTopTgDefined python: True" 
            tal:replace="structure python: '\n\n.. |MDDTopTg| replace:: |MDDIcon_atablacontenidos| %s\n\n.. _MDDTopTg:\n\n' % pMsgGoToToc" /></tal:block>
            
        
    
        
        <tal:block tal:content="python: '\n\n**%s**\n\n' % here.MDDModelDDvlPlone_tool.fTranslateI18N( here, 'ModelDDvlPlone', 'ModelDDvlPlone_TableOfContents_Title', 'Contents-')" />
        
        
        
        <tal:block tal:repeat="TRAVRES python: pNonEmptyTraversals" >
            <tal:block tal:define="pMDDTraversalTarget python: pTraversalTargetsByTraversalName.get( TRAVRES[ 'traversal_name'], '')">
    
                <tal:block tal:condition="python: ( TRAVRES[ 'traversal_kind'] == 'aggregation')">
                    <tal:block tal:condition="python: TRAVRES[ 'num_elements'] > 1">
                        <tal:block tal:condition="python: TRAVRES[ 'contains_collections']">
    
<tal:block tal:content="python: '- |%s|_\n' % (  pMDDTraversalTarget)"/>
    
                            <tal:block tal:repeat="ERES TRAVRES/elements">
<tal:block tal:define="pElementIndex repeat/ERES/index;
                                        pMDDTraversalTarget python: pTraversalTargetsByTraversalName.get( '%sIdx%d' % ( TRAVRES[ 'traversal_name'], pElementIndex,), '')"
                                    tal:content="python: '  - |%s|_\n' % pMDDTraversalTarget" />
                            </tal:block>
                        </tal:block>
                        <tal:block tal:condition="python: not  TRAVRES[ 'contains_collections']">
<tal:block          tal:define="pMDDTraversalTarget python: pTraversalTargetsByTraversalName.get( TRAVRES[ 'traversal_name'], '')"
                            tal:content="python: '- |%s|_\n' % pMDDTraversalTarget"/>
                        </tal:block>
                    </tal:block>
                    <tal:block tal:condition="python: TRAVRES[ 'num_elements'] == 1">
                        <tal:block tal:condition="python: TRAVRES[ 'contains_collections']">
                    
                            <tal:block tal:condition="python: TRAVRES['elements'][ 0][ 'values_by_name'][ 'title'][ 'uvalue'].strip() == TRAVRES['elements'][ 0][ 'archetype_name']">
                                <tal:block tal:define="global pCollectionTitle python: TRAVRES['elements'][ 0][ 'type_translations'][ 'translated_archetype_name']" />
                            </tal:block>
                            <tal:block tal:condition="python: not ( TRAVRES['elements'][ 0][ 'values_by_name'][ 'title'][ 'uvalue'].strip() == TRAVRES['elements'][ 0][ 'archetype_name'])">
                                <tal:block tal:define="global pCollectionTitle python: TRAVRES[ 'elements'][ 0][ 'values_by_name'][ 'title'][ 'uvalue'].strip()" />
                            </tal:block>
                            <tal:block tal:define="pMDDTraversalTarget python: pTraversalTargetsByTraversalName.get( '%sIdx0' % TRAVRES[ 'traversal_name'], '')">                
<tal:block tal:content="python: '- |%s|_\n' % pMDDTraversalTarget" />
                            </tal:block>
                        </tal:block>
                        <tal:block tal:condition="python: not TRAVRES[ 'contains_collections']">
                            <tal:block tal:define="MDDTraversalTarget python: pTraversalTargetsByTraversalName.get(  TRAVRES[ 'traversal_name'], '')"                
                                tal:content="python: '- |%s|_\n' % pMDDTraversalTarget"/>
                        </tal:block>
                    </tal:block>
                </tal:block>
                <tal:block tal:condition="python: ( TRAVRES[ 'traversal_kind'] == 'relation')">
    
<tal:block tal:define="pMDDTraversalTarget python: pTraversalTargetsByTraversalName.get( TRAVRES[ 'traversal_name'], '')"
                    tal:content="python: '- |%s|_\n' % pMDDTraversalTarget"/>
                </tal:block>
            </tal:block>
        </tal:block>
        
        <tal:block tal:repeat="TRAVRES python: pNonEmptyPloneTraversals" >
            <tal:block tal:define="pMDDTraversalTarget python: pTraversalTargetsByTraversalName.get( TRAVRES[ 'traversal_name'], '')">    
<tal:block 
                    tal:define="pMDDTraversalTarget python: pTraversalTargetsByTraversalName.get( TRAVRES[ 'traversal_name'], '')"
                    tal:content="python: '- |%s|_\n' % pMDDTraversalTarget"/>
            </tal:block>
        </tal:block>
        
        
    </tal:block>
       
</tal:block>




<tal:block tal:condition="not: pMDDTopTgDefined">
<tal:block  tal:define="global pMDDTopTgDefined python: True" 
        tal:replace="structure python: '\n\n.. |MDDTopTg| replace:: %s\n\n.. _MDDTopTg:\n\n' % here.MDDModelDDvlPlone_tool.fTranslateI18N( here, 'ModelDDvlPlone', 'ModelDDvlPlone_GoToTOC', 'toc-')" />
</tal:block>


<tal:block tal:repeat="unTextAttributeName SRES/text_field_names" ><tal:block 
    tal:condition="python: not unTextAttributeName == 'description'" ><tal:block 
        tal:define="ATTRRES python: SRES[ 'values_by_name'][ unTextAttributeName]" ><metal:block 
            metal:use-macro="here/Texto_EditableBody_i18n_view/macros/tTexto_EditableBody_i18n" /></tal:block></tal:block></tal:block>
            
            



<tal:block tal:repeat="unTraversalName SRES/traversal_names" ><tal:block 
    tal:define="TRAVRES python: SRES[ 'traversals_by_name'][ unTraversalName];
        pMDDTraversalTarget python: pTraversalTargetsByTraversalName.get( unTraversalName, '')" ><tal:block 
        tal:condition="python: TRAVRES[ 'traversal_kind'] == 'aggregation'" ><tal:block 
            tal:condition="not: SRES/is_collection" ><tal:block 
                tal:condition="TRAVRES/contains_collections" >
<metal:block metal:use-macro="here/Colecciones_EditableBody_i18n_view/macros/tColecciones_EditableBody_i18n" /></tal:block><tal:block 
                tal:condition="not: TRAVRES/contains_collections" >
<metal:block metal:use-macro="here/SinColeccion_EditableBody_i18n_view/macros/tSinColeccion_EditableBody_i18n" /></tal:block></tal:block><tal:block 
            tal:condition="SRES/is_collection" >
<metal:block metal:use-macro="here/ColeccionSola_EditableBody_i18n_view/macros/tColeccionSola_EditableBody_i18n" /></tal:block></tal:block><tal:block 
        tal:condition="python: TRAVRES[ 'traversal_kind'] == 'relation'" ><tal:block 
            tal:condition="python: TRAVRES['is_multivalued']" ><tal:block tal:define="pRelationCursorNameParameter unTraversalName">
<metal:block metal:use-macro="here/Referencias_EditableBody_i18n_view/macros/tReferencias_EditableBody_i18n" /></tal:block></tal:block><tal:block 
            tal:condition="python: not TRAVRES[ 'is_multivalued']" ><tal:block tal:define="pRelationCursorNameParameter unTraversalName">
<metal:block metal:use-macro="here/Referencia_EditableBody_i18n_view/macros/tReferencia_EditableBody_i18n" /></tal:block></tal:block></tal:block></tal:block></tal:block>          



<tal:block tal:define="pPloneElementsContainer python: SRES[ 'object']" >
<metal:block metal:use-macro="here/ColeccionElementosPlone_EditableBody_i18n_view/macros/tColeccionElementosPlone_EditableBody_i18n" />
</tal:block>
  
|
|

|MDDTopTg|_

  
  
</tal:block></tal:block><metal:block metal:use-macro="here/PerformanceAnalysis/macros/tRenderProcessingTime_REST" /> </tal:block>

